한재현 강사님 강의

배열
* 데이터의 집합. 여러개의 값을 하나의 이름으로 묶어 사용할 수 있게 도와줍니다.
* 배열의 각 값은 원소(element) 혹은 요소 라고 부릅니다.
* 배열의 크기는 length 프로퍼티를 통해 알 수 있습니다.
* 배열의 생성자 함수에 숫자를 한개만 넣으면 인스턴스의 길이를, 여러 숫자를 넣으면 배열의 원소를 뜻합니다.
* 배열에도 리터럴 표현이 있습니다.(  [  ]  ) 
* 각괄호 + 인덱스를 통해 각 원소에 접근 할 수 있으며, 원소에 값을 저장 할 수도 있습니다. 심지어 존재하지 않는 원소에도 접근이 가능합니다.
* 리터럴 생성과 동시에 원소에 접근 할 수도 있습니다. ([1,2,3,][0] === 1)

* pop() : 배열 마지막 요소를 제거하고 그 값을 반환
* push() : 배열의 마지막 요소로 인자로 전달한 값을 추가하고 새로운 배열의 길이를 반환합니다.

let arr = new Array();
arr.push("마늘");
arr.push("양파");
arr.push("배추");
arr.pop();

splice() : 기존의 요소를 삭제하거나, 교체하거나, 새 요소를 추가합니다. 인덱스, 카운트, 아이템 순서로 인자를 전달합니다.

let fish = ['정어리', '고등어', '돌고래', '참치', '고래상어', '코끼리'];
fish.splice(5,1);
//코끼리제거
fish.splice(4,0,'다금바리');
//다금바리 참치 뒤에 추가
fish.splice(2,1,'옥돔','갈치');
//돌고래 옥돔, 갈치로 교체

slice() : 두 개의 인자를 전달하여 배열안에 있는 요소를 새로운 배열로 반환합니다. 원본 요소가 바뀌지 않는것이 포인트! 특히 두 번째 인자에 해당하는 인덱스의 아이템은 포함하지 않습니다.

sort() :  배열의 요소를 정렬한 후 그 배열을 반환합니다.
숫자형 데이터 정렬의 단점을 해결하기 위해 비교 함수(compareFunction)를 사용할 수 있습니다.

var arrNum2 = [13, 9, 10, 2];
        // 오름차순으로 정렬할 경우 (a - b)
        // 13 - 9 == 4 --> 양수임으로 9를 앞으로
        // 13 - 10 == 3 --> 양수임으로 10을 앞으로
        // 9 - 10 == -1 --> 음수 임으로 9를 앞으로 [9, 10, 13, 2]
        // 13 - 2 == 11 --> 양수임으로 2를 앞으로 [9, 10, 2, 13]
        // 10 - 2 == 8 --> 양수임으로 2를 앞으로 [9, 2, 10, 13]
        // 9 - 2 == 7 --> 양수임으로 2를 앞으로 [2, 9, 10, 13]